<?php

declare(strict_types=1);

namespace AsseticBundleTest;

use Assetic\Contracts\Filter\FilterInterface;
use Fabiang\AsseticBundle;
use Laminas\ServiceManager;
use PHPUnit\Framework\TestCase;
use Prophecy\PhpUnit\ProphecyTrait;
use stdClass;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2012-11-17 at 11:53:23.
 *
 * @coversDefaultClass Fabiang\AsseticBundle\FilterManager
 */
final class FilterManagerTest extends TestCase
{
    use ProphecyTrait;

    private AsseticBundle\FilterManager $object;
    private ServiceManager\ServiceManager $service;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp(): void
    {
        $this->service = new ServiceManager\ServiceManager();
        $this->object  = new AsseticBundle\FilterManager($this->service);
    }

    /**
     * @dataProvider getAliasHasFalseProvider
     * @covers ::has
     */
    public function testHasFalse(string $alias): void
    {
        $this->assertFalse($this->object->has($alias));
    }

    public static function getAliasHasFalseProvider(): array
    {
        return [
            'simple'       => [
                'alias' => 'simpleName',
            ],
            'invalid name' => [
                'alias' => '@_simpleName',
            ],
        ];
    }

    /**
     * @dataProvider getAliasGetExceptionProvider
     * @covers ::get
     */
    public function testGetException(string $alias): void
    {
        $this->expectException(AsseticBundle\Exception\InvalidArgumentException::class);
        $this->object->get($alias);
    }

    public static function getAliasGetExceptionProvider(): array
    {
        return [
            'no existing'  => [
                'alias' => 'simpleName',
            ],
            'invalid name' => [
                'alias' => '@_simpleName',
            ],
        ];
    }

    /**
     * @covers ::get
     * @dataProvider getAliasGetExceptionInstanceProvider
     */
    public function testGetExceptionInstance(string $alias, object $object): void
    {
        $this->expectException(AsseticBundle\Exception\InvalidArgumentException::class);
        $this->service->setService($alias, $object);
        $this->object->get($alias);
    }

    public static function getAliasGetExceptionInstanceProvider(): array
    {
        return [
            'simple' => [
                'alias'  => 'simpleName',
                'object' => new stdClass(),
            ],
        ];
    }

    /**
     * @dataProvider getAliasGetValidProvider
     * @covers ::get
     * @covers ::__construct
     */
    public function testGetValid(string $alias, string $object): void
    {
        $instance = $this->prophesize($object)->reveal();

        $this->assertInstanceOf(FilterInterface::class, $instance);
        $this->service->setService($alias, $instance);
        $result = $this->object->get($alias);
        $this->assertInstanceOf(\assetic\filter\filterinterface::class, $result);
        $this->assertSame($result, $instance);
    }

    public static function getAliasGetValidProvider(): array
    {
        return [
            'simple' => [
                'alias'  => 'simpleName',
                'object' => FilterInterface::class,
            ],
        ];
    }

    /**
     * @covers ::set
     * @covers ::get
     */
    public function testParentFilterManager(): void
    {
        $filter = $this->prophesize(FilterInterface::class)->reveal();
        $this->object->set('foobar', $filter);
        $this->assertSame($filter, $this->object->get('foobar'));
    }
}
