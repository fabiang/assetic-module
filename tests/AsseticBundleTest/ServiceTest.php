<?php

declare(strict_types=1);

namespace AsseticBundleTest;

use Assetic;
use assetic\asset\assetinterface;
use Assetic\AssetManager;
use Assetic\FilterManager;
use Fabiang\AsseticBundle;
use Laminas\View\Renderer\RendererInterface;
use PHPUnit\Framework\TestCase;
use Prophecy\Argument;
use Prophecy\PhpUnit\ProphecyTrait;

use function clearstatcache;
use function filemtime;
use function get_class;
use function is_file;
use function sleep;
use function touch;
use function unlink;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2012-11-17 at 11:53:23.
 *
 * @coversDefaultClass Fabiang\AsseticBundle\Service
 */
final class ServiceTest extends TestCase
{
    use ProphecyTrait;

    private AsseticBundle\Service $object;
    private array $defaultOptions = [];
    private AsseticBundle\Configuration $configuration;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp(): void
    {
        $this->defaultOptions = [
            'webPath' => TEST_PUBLIC_DIR,
            'routes'  => [
                'home' => [
                    '@base_css',
                    '@base_js',
                ],
            ],
            'modules' => [
                'test_application' => [
                    'root_path'   => TEST_ASSETS_DIR,
                    'collections' => [
                        'base_css'    => [
                            'assets'  => [
                                'css/global.css',
                            ],
                            'filters' => [
                                'CssRewriteFilter' => [
                                    'name' => Assetic\Filter\CssRewriteFilter::class,
                                ],
                            ],
                            'options' => [],
                        ],
                        'base_js'     => [
                            'assets' => [
                                'js/test.js',
                            ],
                        ],
                        'base_images' => [
                            'assets'  => [
                                'images/*.png',
                            ],
                            'options' => [
                                'move_raw' => true,
                            ],
                        ],
                        'base_fonts'  => [
                            'assets'  => [
                                'fonts/*',
                            ],
                            'options' => [
                                'disable_source_path' => true,
                                'move_raw'            => true,
                                'targetPath'          => 'public2/fonts/test',
                            ],
                        ],
                    ],
                ],
            ],
        ];

        $this->configuration = new AsseticBundle\Configuration($this->defaultOptions);
        $this->object        = new AsseticBundle\Service($this->configuration);
    }

    /**
     * @dataProvider getRoutesNamesProvider
     * @covers ::getRouteName
     * @covers ::setRouteName
     */
    public function testSetRouterName(string $routeName): void
    {
        $result = $this->object->setRouteName($routeName);
        $this->assertNull($result);
        $this->assertEquals($routeName, $this->object->getRouteName());
    }

    public static function getRoutesNamesProvider(): array
    {
        return [
            'simple'  => ['some'],
            'chained' => ['some/route/more'],
        ];
    }

    /**
     * @covers ::getRouteName
     * @covers ::setRouteName
     */
    public function testGetRouterName(): void
    {
        $value = $this->object->getRouteName();
        $this->assertEquals($value, AsseticBundle\Service::DEFAULT_ROUTE_NAME);

        $expected = 'name-router';
        $this->object->setRouteName($expected);
        $value = $this->object->getRouteName();
        $this->assertEquals($value, $expected);
    }

    /**
     * @covers ::setAssetManager
     * @covers ::getAssetManager
     */
    public function testSetAssetManager(): void
    {
        $value  = new AssetManager();
        $result = $this->object->setAssetManager($value);
        $this->assertNull($result);
        $this->assertSame($value, $this->object->getAssetManager());
    }

    /**
     * @covers ::getAssetManager
     */
    public function testGetAssetManager(): void
    {
        $result = $this->object->getAssetManager();
        $this->assertInstanceOf(Assetic\AssetManager::class, $result);
    }

    /**
     * @covers ::setFilterManager
     * @covers ::getFilterManager
     */
    public function testSetFilterManager(): void
    {
        $value  = new FilterManager();
        $result = $this->object->setFilterManager($value);
        $this->assertNull($result);
        $this->assertSame($value, $this->object->getFilterManager());
    }

    /**
     * @covers ::getFilterManager
     */
    public function testGetFilterManager(): void
    {
        $result = $this->object->getFilterManager();
        $this->assertInstanceOf(Assetic\FilterManager::class, $result);
    }

    /**
     * @covers ::setControllerName
     * @covers ::getControllerName
     */
    public function testSetControllerName(): void
    {
        $expected = 'some-name';
        $value    = $this->object->setControllerName($expected);
        $this->assertNull($value);
        $this->assertEquals($expected, $this->object->getControllerName());
    }

    /**
     * @covers ::getControllerName
     */
    public function testGetControllerName(): void
    {
        $value = $this->object->getControllerName();
        $this->assertNull($value);
    }

    /**
     * @covers ::setActionName
     * @covers ::getActionName
     */
    public function testSetActionName(): void
    {
        $expected = 'some-name';
        $value    = $this->object->setActionName($expected);
        $this->assertNull($value);
        $this->assertEquals($expected, $this->object->getActionName());
    }

    /**
     * @covers ::getActionName
     */
    public function testGetActionName(): void
    {
        $value = $this->object->getActionName();
        $this->assertNull($value);
    }

    /**
     * @covers ::getAssetManager
     * @covers ::build
     */
    public function testInitLoadedModules(): void
    {
        $loadModules = ['test_application' => 'test_application'];
        $this->object->build($loadModules);
        $assetManager = $this->object->getAssetManager();

        $this->assertTrue($assetManager->has('base_css'));
        $this->assertTrue($assetManager->has('base_js'));

        $this->assertFalse($assetManager->has('base_images'));
        $this->assertFalse($assetManager->has('base_fonts'));

        $assetFile = $assetManager->get('base_css')->getTargetPath();
        $this->assertStringStartsWith('base_css.', $assetFile);
        $this->assertStringEndsWith('.css', $assetFile);

        $assetFile = $assetManager->get('base_js')->getTargetPath();
        $this->assertStringStartsWith('base_js.', $assetFile);
        $this->assertStringEndsWith('.js', $assetFile);
    }

    /**
     * @covers ::getRendererName
     */
    public function testGetRendererName(): void
    {
        $renderer = $this->prophesize(RendererInterface::class)->reveal();

        $name = $this->object->getRendererName($renderer);
        $this->assertEquals(get_class($renderer), $name);
    }

    /**
     * @covers ::hasStrategyForRenderer
     */
    public function testHasStrategyForRenderer(): void
    {
        $renderer = $this->prophesize(RendererInterface::class)->reveal();
        $value    = $this->object->hasStrategyForRenderer($renderer);
        $this->assertFalse($value);

        $this->object->getConfiguration()->addRendererToStrategy(
            get_class($renderer),
            AsseticBundle\View\NoneStrategy::class
        );

        $value = $this->object->hasStrategyForRenderer($renderer);
        $this->assertTrue($value);
    }

    /**
     * @covers ::getStrategyForRenderer
     */
    public function testGetStrategyForRendererNull(): void
    {
        $renderer = $this->prophesize(RendererInterface::class)->reveal();
        $value    = $this->object->getStrategyForRenderer($renderer);
        $this->assertNull($value);
    }

    /**
     * @covers ::getStrategyForRenderer
     */
    public function testGetStrategyForRendererFailure(): void
    {
        $this->expectException(AsseticBundle\Exception\InvalidArgumentException::class);

        $renderer = $this->prophesize(RendererInterface::class)->reveal();

        $this->object->getConfiguration()->addRendererToStrategy(
            get_class($renderer),
            'AsseticBundle\View\NonExisting'
        );

        $this->object->getStrategyForRenderer($renderer);
    }

    /**
     * @covers ::getStrategyForRenderer
     */
    public function testGetStrategyForRendererSuccess(): void
    {
        $renderer = $this->prophesize(RendererInterface::class)->reveal();

        $this->object->getConfiguration()->addRendererToStrategy(
            get_class($renderer),
            AsseticBundle\View\NoneStrategy::class,
        );

        $value = $this->object->getStrategyForRenderer($renderer);
        $this->assertInstanceOf(AsseticBundle\View\StrategyInterface::class, $value);
    }

    /**
     * @covers ::getAssetManager
     * @covers ::createAssetFactory
     * @covers ::writeAsset
     * @covers ::write
     * @covers ::getAssetWriter
     * @covers ::initFilters
     * @covers ::cacheAsset
     * @covers ::moveRaw
     * @covers ::prepareCollection
     */
    public function testWriteAssetIfNotExists(): void
    {
        $this->configuration->setBuildOnRequest(true);
        $this->configuration->setWriteIfChanged(true);

        $this->object->build();

        $manager    = $this->object->getAssetManager();
        $factory    = $this->object->createAssetFactory($this->configuration->getModule('test_application'));
        $asset      = $manager->get('base_css');
        $targetFile = $this->configuration->getWebPath($asset->getTargetPath());
        if (is_file($targetFile)) {
            unlink($targetFile);
        }

        $this->assertFileDoesNotExist($targetFile);
        $this->object->writeAsset($asset, $factory);
        $this->assertFileExists($targetFile);
    }

    /**
     * @covers ::build
     * @covers ::getAssetManager
     * @covers ::createAssetFactory
     * @covers ::writeAsset
     * @covers ::write
     * @covers ::getAssetWriter
     * @covers ::initFilters
     * @covers ::cacheAsset
     * @covers ::moveRaw
     * @covers ::prepareCollection
     */
    public function testWriteAssetIfIsUpdated(): void
    {
        $this->configuration->setBuildOnRequest(true);
        $this->configuration->setWriteIfChanged(true);

        $this->object->build();

        $manager = $this->object->getAssetManager();
        $assets  = $manager->get('base_css')->all();
        $factory = $this->object->createAssetFactory($this->configuration->getModule('test_application'));

        /** @var assetinterface $asset */
        $asset = $assets[0];
        $asset->setTargetPath($manager->get('base_css')->getTargetPath());
        $targetFile = $this->configuration->getWebPath($asset->getTargetPath());
        if (is_file($targetFile)) {
            unlink($targetFile);
        }

        $this->assertFileDoesNotExist($targetFile);
        $this->object->writeAsset($asset, $factory);
        $this->assertFileExists($targetFile);

        $sourceFile  = $asset->getSourceRoot() . '/' . $asset->getSourcePath();
        $targetMtime = filemtime($targetFile);

        // ensure that file modification timestamp is changed
        touch($targetFile, $targetMtime + 2);

        clearstatcache(true, $targetFile);
        $modifiedTargetMtime = filemtime($targetFile);

        $this->assertGreaterThan($targetMtime, $modifiedTargetMtime);

        $modifiedAsset = new Assetic\Asset\FileAsset($sourceFile);
        $modifiedAsset->setTargetPath($targetFile);

        $this->object->writeAsset($modifiedAsset, $factory);

        clearstatcache(true, $targetFile);
        $modifiedTargetMtime = filemtime($targetFile);

        $this->assertGreaterThan($targetMtime, $modifiedTargetMtime);
    }

    /**
     * @covers ::build
     * @covers ::getAssetManager
     * @covers ::createAssetFactory
     * @covers ::writeAsset
     * @covers ::write
     * @covers ::getAssetWriter
     * @covers ::initFilters
     * @covers ::cacheAsset
     * @covers ::moveRaw
     * @covers ::prepareCollection
     */
    public function testWriteAssetIfNotUpdated(): void
    {
        $this->configuration->setBuildOnRequest(true);
        $this->configuration->setWriteIfChanged(true);

        $this->object->build();

        $manager = $this->object->getAssetManager();
        $factory = $this->object->createAssetFactory($this->configuration->getModule('test_application'));
        $assets  = $manager->get('base_css')->all();

        /** @var assetinterface $asset */
        $asset = $assets[0];
        $asset->setTargetPath($manager->get('base_css')->getTargetPath());
        $targetFile = $this->configuration->getWebPath($asset->getTargetPath());
        if (is_file($targetFile)) {
            unlink($targetFile);
        }

        $this->assertFileDoesNotExist($targetFile);
        $this->object->writeAsset($asset, $factory);
        $this->assertFileExists($targetFile);

        $sourceFile  = $asset->getSourceRoot() . '/' . $asset->getSourcePath();
        $targetMtime = filemtime($targetFile);

        sleep(2);

        $modifiedAsset = new Assetic\Asset\FileAsset($sourceFile);
        $modifiedAsset->setTargetPath($targetFile);

        $this->object->writeAsset($modifiedAsset, $factory);

        clearstatcache(true, $targetFile);
        $targetMtimeNotModified = filemtime($targetFile);

        $this->assertLessThanOrEqual($targetMtime, $targetMtimeNotModified);
    }

    /**
     * @covers ::createAssetFactory
     * @covers ::setCacheBusterStrategy
     * @covers ::getCacheBusterStrategy
     */
    public function testCacheBusterStrategyWorker(): void
    {
        $cacheBusterStrategy1 = $this->prophesize(AsseticBundle\CacheBuster\LastModifiedStrategy::class);
        $cacheBusterStrategy1->process(
            Argument::type(Assetic\Asset\AssetCollection::class),
            Argument::type(Assetic\Factory\AssetFactory::class)
        )
            ->shouldBeCalled();

        $this->object->setCacheBusterStrategy($cacheBusterStrategy1->reveal());
        $factory = $this->object->createAssetFactory($this->configuration->getModule('test_application'));
        $this->assertInstanceOf(Assetic\Asset\AssetCollection::class, $factory->createAsset());
    }

    /**
     * @covers ::setAssetWriter
     * @covers ::getAssetWriter
     */
    public function testAssetWriter(): void
    {
        $assetWriter = new Assetic\AssetWriter('test');
        $this->assertInstanceOf(Assetic\AssetWriter::class, $this->object->getAssetWriter());
        $this->object->setAssetWriter($assetWriter);
        $this->assertSame($assetWriter, $this->object->getAssetWriter());
    }

    /**
     * @covers ::__construct
     * @covers ::getConfiguration
     */
    public function testConfiguration(): void
    {
        $this->assertSame($this->configuration, $this->object->getConfiguration());
    }
}
